// Generated by CoffeeScript 1.11.1

/**
 *
 * probemon adapter
 */


/* jshint -W097 */


/*jslint node: true */

(function() {
  var OFFLINE_TIMEOUT, adapter, handleProbeRequest, main, pcap, requests, setOffline, utils;

  requests = {};

  OFFLINE_TIMEOUT = 1000 * 60 * 10;

  setOffline = function(mac) {
    requests[mac].online = false;
    return adapter.setState(mac + '.online', {
      val: false,
      ack: true
    });
  };

  handleProbeRequest = function(mac) {
    var device, found, i, len, ref;
    found = false;
    ref = adapter.config.devices;
    for (i = 0, len = ref.length; i < len; i++) {
      device = ref[i];
      if (device.mac === mac.toString()) {
        found = true;
      }
    }
    if (!found) {
      return;
    }
    adapter.log.info("mac address found");
    if (!requests[mac]) {
      requests[mac] = {
        lastSeen: +(new Date),
        online: true,
        timeout: setTimeout((function() {
          return setOffline(mac);
        }), OFFLINE_TIMEOUT)
      };
      adapter.setObject(mac + '.online', {
        type: 'state',
        common: {
          name: 'online',
          type: 'boolean',
          role: 'indicator.reachable'
        },
        "native": {}
      });
      adapter.setObject(mac + '.name', {
        type: 'state',
        common: {
          name: 'name',
          type: 'string'
        },
        "native": {}
      });
      adapter.setState(mac + '.name', {
        val: "person" + (Object.keys(requests).length),
        ack: true
      });
      adapter.setObject(mac + '.lastSeen', {
        type: 'state',
        common: {
          name: 'lastSeen',
          type: 'date'
        },
        "native": {}
      });
    } else {
      clearTimeout(requests[mac].timeout);
      requests[mac].timeout = setTimeout((function() {
        return setOffline(mac);
      }), OFFLINE_TIMEOUT);
      requests[mac].lastSeen = +(new Date);
      requests[mac].online = true;
    }
    adapter.setState(mac + '.online', {
      val: true,
      ack: true
    });
    return adapter.setState(mac + '.lastSeen', {
      val: +(new Date),
      ack: true
    });
  };

  main = function() {
    adapter.log.info('creating pcap session');
    pcap.createSession(adapter.config["interface"], '(type mgt) and (type mgt subtype probe-req )').on('packet', function(raw_packet) {
      var frame;
      frame = pcap.decode.packet(raw_packet).payload.ieee802_11Frame;
      if (frame.type === 0 && frame.subType === 4) {
        handleProbeRequest(frame.shost);
      }
    });
    return adapter.subscribeStates('*');
  };

  'use strict';

  pcap = require('pcap');

  utils = require(__dirname + '/lib/utils');

  adapter = utils.adapter('probemon');

  adapter.on('unload', function(callback) {
    var e;
    try {
      adapter.log.info('cleaned everything up...');
      callback();
    } catch (error) {
      e = error;
      callback();
    }
  });

  adapter.on('objectChange', function(id, obj) {
    adapter.log.info('objectChange ' + id + ' ' + JSON.stringify(obj));
  });

  adapter.on('stateChange', function(id, state) {
    adapter.log.info('stateChange ' + id + ' ' + JSON.stringify(state));
    if (state && !state.ack) {
      adapter.log.info('ack is not set!');
    }
  });

  adapter.on('ready', function() {
    main();
  });

}).call(this);

//# sourceMappingURL=main.js.map
